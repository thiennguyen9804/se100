import { getAllInbound } from "../../../api/inboundApi";
import { Timestamp } from "firebase/firestore";
import { getAllOutbound } from "../../../api/outboundApi";

function convertTimestampToDate(timestamp) {
  if (timestamp instanceof Timestamp) {
	return timestamp.toDate();
  }
  return timestamp; // Tr·∫£ v·ªÅ n·∫øu kh√¥ng ph·∫£i l√† Timestamp
}

// ƒê·∫øm s·ªë ƒë∆°n theo qu√Ω
function countRecordsByQuarter(data) {
  const quarterCounter = Array(4).fill(0); // Kh·ªüi t·∫°o 4 ph·∫ßn t·ª≠ ƒë·∫°i di·ªán cho 4 qu√Ω
  data.forEach((month) => {
	// console.log("üöÄ ~ data.forEach ~ month:", month)
	
	const quarter = Math.floor(month / 3); // T√≠nh qu√Ω t·ª´ ch·ªâ s·ªë th√°ng
	quarterCounter[quarter]++;
  });
  return quarterCounter;
}

export const handleDataByQuarter = async () => {
  try {
	const outbound = await getAllOutbound();
	// Convert data t·ª´ timestamp v·ªÅ l·∫°i date
	const formattedData = outbound.map((item) => ({
	  CreateTime: convertTimestampToDate(item.CreateTime),
	}));
	// D√πng getMonth ƒë·ªÉ x√°c ƒë·ªãnh th√°ng c·ªßa t·ª´ng record
	const monthData = formattedData.map((item) => item.CreateTime.getMonth());
	// ƒê·∫øm s·ªë record theo qu√Ω
	const recordsByQuarter = countRecordsByQuarter(monthData);

	// T·∫°o dataset theo qu√Ω
	const dataset = [
	  {
		amount: recordsByQuarter[0],
		quarter: "Q1 (Jan-Mar)",
	  },
	  {
		amount: recordsByQuarter[1],
		quarter: "Q2 (Apr-Jun)",
	  },
	  {
		amount: recordsByQuarter[2],
		quarter: "Q3 (Jul-Sep)",
	  },
	  {
		amount: recordsByQuarter[3],
		quarter: "Q4 (Oct-Dec)",
	  },
	];

	return dataset;
  } catch (error) {
	console.error("Error fetching data: ", error);
  }
};

export function valueFormatter(value) {
  return `${value} ƒë∆°n`;
}
